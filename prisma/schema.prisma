generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  super_admin
  admin
}

// User model with relation to ServiceSlug (one user can have multiple slugs)
model User {
  id       String  @id @default(uuid())
  username String  @unique()
  email    String  @unique
  password String
  role     Role
  contact  String
  isActive Boolean @default(false)

  // One-to-many relationship: One user can have many service slugs
  serviceSlugs ServiceSlug[] @relation("UserToServiceSlugs")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Client {
  id          String  @id @default(uuid())
  companyName String  @unique()
  propritor   String
  email       String  @unique
  contact     String
  address     String
  isActive    Boolean @default(false)

  visaFiles VisaFile[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("clients")
}

model VisaFile {
  id              String  @id @default(uuid())
  status          Boolean @default(false)
  appointmentFile Json

  clientId String
  client   Client @relation(fields: [clientId], references: [id])

  slugId      String?
  serviceSlug ServiceSlug? @relation(fields: [slugId], references: [id], name: "ServiceSlugToVisaFiles")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ServiceSlug {
  id       String  @id @default(uuid())
  center   Int
  ivac     Int
  phone    String?
  otp      String?
  dateSlot String?
  timeSlot Json?

  asignUserId String?
  asignUser   User?   @relation(fields: [asignUserId], references: [id], name: "UserToServiceSlugs")

  visaFiles VisaFile[] @relation("ServiceSlugToVisaFiles")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("services_slug")
}

enum Gender {
  male
  female
}

model Country {
  id          String  @id @default(uuid())
  name        String  @unique
  countryCode String  @unique
  isActive    Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  addresses Address[]
  idTypes   IDType[]

  stepFilds StepFild[]

  @@map("countries")
}

model FormStep {
  id     String @id @default(uuid())
  tittle String
  value  String @unique

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  stepFilds StepFild[]

  @@map("form_steps")
}

model Address {
  id         String  @id @default(uuid())
  line1      String
  line2      String?
  countryId  String
  postalCode String

  country Country @relation(fields: [countryId], references: [id])
  userId  String?

  @@map("addresses")
}

model IDType {
  id        String @id @default(uuid())
  tittle    String @unique
  countryId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  country   Country  @relation(fields: [countryId], references: [id])

  @@map("id_types")
}

model StepFild {
  id          String  @id @default(uuid())
  name        String
  label       String
  placeholder String
  type        String
  errorText   String?
  countryId   String
  stepValue   String
  isRequired  Boolean @default(false)

  country  Country  @relation(fields: [countryId], references: [id])
  formStep FormStep @relation(fields: [stepValue], references: [value])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("step_filds")
}
